{% extends 'AppBundle::base.html.twig' %}

{% trans_default_domain "app" %}

{% block body -%}
<h1>{{ 'portfolio'|trans }} #{{ entity.id }}</h1>

<div id="chart_div"></div>

<div class="filter">
  <h3>{{ 'filter'|trans }}</h3>
  {% for share in entity.shares %}
  <a href="#" class="showed btn-sm btn-primary" data-column="{{ loop.index }}">{{ share.name }}</a>
    {% endfor %}
    <a href="#" class="showed btn-sm btn-primary" data-column="{{ entity.shares|length+1 }}">{{ 'portfolio'|trans }}</a>
  </div>

  <ul class="record_actions">
    <li>
      <a class="btn btn-default" href="{{ path('portfolio') }}">
        {{ 'Back to the list'|trans }}
      </a>
    </li>
    <li>
      <a class="btn btn-default" href="{{ path('portfolio_edit', { 'id': entity.id }) }}">
        {{ 'Edit'|trans }}
      </a>
    </li>
    <li>{{ form(delete_form) }}</li>
  </ul>
  {% endblock %}

  {% block javascripts %}
  {{ parent() }}

  <script type="text/javascript">

      // Load the Visualization API and the piechart package.
      google.load('visualization', '1.1', {packages: ['line']});

      // Set a callback to run when the Google Visualization API is loaded.
      google.setOnLoadCallback(drawCharts);

      // Callback that creates and populates a data chart,
      // instantiates the pie chart, passes in the data and
      // draws it.
      function drawCharts() {

        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Date');

        {% for name in share_names %}
        data.addColumn('number', '{{ name }}');
        {% endfor %}

        data.addRows([
          {% for share_date,share_data in chart_data %}
          [new Date('{{share_date}}'),
          {{share_data|join(',')}}
          ],
          {% endfor %}
          ]);

        var options = {
          chart: {
            title: 'Стоимость портфеля и акций от времени'
          },
          width: 900,
          height: 500,
          series: {
              // Gives each series an axis name that matches the Y-axis below.
              0: {axis: 'Стоимость'},
              1: {axis: 'Время'}
            },
            axes: {
              // Adds labels to each axis; they don't have to match the axis names.
              y: {
                Temps: {label: 'Стоимость (Celsius)'},
                Daylight: {label: 'Daylight'}
              }
            }
          }

          var view = new google.visualization.DataView(data); 


          var chart = new google.charts.Line(document.getElementById('chart_div'));

          $('.filter a').on('click',function (event) {
            $(this).toggleClass('showed').toggleClass('btn-default').toggleClass('btn-primary');
            if ($('.filter .showed').length == 0) {
              $(this).toggleClass('showed').toggleClass('btn-default').toggleClass('btn-primary');
              return false;
            }

            var columns = [0];
            $('.filter .showed').each(function(){
              columns.push($(this).data('column'));
            });
            view.setColumns(columns);
            
            chart.draw(view, options);

            return false;
          });


          chart.draw(view, options); 
        }
      </script>
      {% endblock %}
